define("format_flexsections/local/content/actions",["exports","core_courseformat/local/content/actions","core/modal_factory","core/modal_events","core/str"],(function(_exports,_actions,_modal_factory,_modal_events,_str){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Course state actions dispatcher.
   *
   * This module captures all data-dispatch links in the course content and dispatch the proper
   * state mutation, including any confirmation and modal required.
   *
   * @module     format_flexsections/local/content/actions
   * @class      format_flexsections/local/content/actions
   * @copyright  2022 Ruslan Kabalin
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_actions=_interopRequireDefault(_actions),_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events);class _default extends _actions.default{async _requestMergeUpSection(target,event){var _sectionInfo$cmlist;const sectionId=target.dataset.id;if(!sectionId)return;const sectionInfo=this.reactive.get("section",sectionId);event.preventDefault();if((null!==(_sectionInfo$cmlist=sectionInfo.cmlist)&&void 0!==_sectionInfo$cmlist?_sectionInfo$cmlist:[]).length||sectionInfo.hassummary||sectionInfo.rawtitle||sectionInfo.countsubsections){const modalParams={title:(0,_str.get_string)("confirm","core"),body:(0,_str.get_string)("confirmmerge","format_flexsections"),saveButtonText:(0,_str.get_string)("mergeup","format_flexsections"),type:_modal_factory.default.types.SAVE_CANCEL},modal=await this._modalBodyRenderedPromise(modalParams);modal.getRoot().on(_modal_events.default.save,(e=>{e.preventDefault(),modal.destroy(),this.reactive.dispatch("sectionMergeUp",target.dataset.id)}))}else this.reactive.dispatch("sectionMergeUp",target.dataset.id)}async _requestDeleteSection(target,event){var _sectionInfo$cmlist2;const sectionId=target.dataset.id;if(!sectionId)return;const sectionInfo=this.reactive.get("section",sectionId);event.preventDefault();if((null!==(_sectionInfo$cmlist2=sectionInfo.cmlist)&&void 0!==_sectionInfo$cmlist2?_sectionInfo$cmlist2:[]).length||sectionInfo.hassummary||sectionInfo.rawtitle||sectionInfo.countsubsections){const modalParams={title:(0,_str.get_string)("confirm","core"),body:(0,_str.get_string)("confirmdelete","format_flexsections"),saveButtonText:(0,_str.get_string)("delete","core"),type:_modal_factory.default.types.SAVE_CANCEL},modal=await this._modalBodyRenderedPromise(modalParams);modal.getRoot().on(_modal_events.default.save,(e=>{e.preventDefault(),modal.destroy(),this.reactive.dispatch("sectionDelete",[sectionId])}))}else this.reactive.dispatch("sectionDelete",[sectionId])}}return _exports.default=_default,_exports.default}));

//# sourceMappingURL=actions.min.js.map