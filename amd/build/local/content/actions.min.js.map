{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     format_flexsections/local/content/actions\n * @class      format_flexsections/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Actions from 'core_courseformat/local/content/actions';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\n\nexport default class extends Actions {\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        const cmList = sectionInfo.cmlist ?? [];\n        if (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle || sectionInfo.countsubsections) {\n            // We need confirmation if the section has something.\n            const modalParams = {\n                title: getString('confirm', 'core'),\n                body: getString('confirmdelete', 'format_flexsections', sectionInfo.title),\n                saveButtonText: getString('delete', 'core'),\n                type: ModalFactory.types.SAVE_CANCEL,\n            };\n\n            const modal = await this._modalBodyRenderedPromise(modalParams);\n\n            modal.getRoot().on(\n                ModalEvents.save,\n                e => {\n                    // Stop the default save button behaviour which is to close the modal.\n                    e.preventDefault();\n                    modal.destroy();\n                    this.reactive.dispatch('sectionDelete', [sectionId]);\n                }\n            );\n            return;\n        } else {\n            // We don't need confirmation to delete empty sections.\n            this.reactive.dispatch('sectionDelete', [sectionId]);\n        }\n    }\n}\n"],"names":["Actions","target","event","sectionId","dataset","id","sectionInfo","this","reactive","get","preventDefault","cmlist","length","hassummary","rawtitle","countsubsections","modalParams","title","body","saveButtonText","type","ModalFactory","types","SAVE_CANCEL","modal","_modalBodyRenderedPromise","getRoot","on","ModalEvents","save","e","destroy","dispatch"],"mappings":";;;;;;;;;;;gQAgC6BA,6CAQGC,OAAQC,qCAE1BC,UAAYF,OAAOG,QAAQC,OAE5BF,uBAGCG,YAAcC,KAAKC,SAASC,IAAI,UAAWN,WAEjDD,MAAMQ,iDAESJ,YAAYK,0DAAU,IAC1BC,QAAUN,YAAYO,YAAcP,YAAYQ,UAAYR,YAAYS,wBAEzEC,YAAc,CAChBC,OAAO,mBAAU,UAAW,QAC5BC,MAAM,mBAAU,gBAAiB,sBAAuBZ,YAAYW,OACpEE,gBAAgB,mBAAU,SAAU,QACpCC,KAAMC,uBAAaC,MAAMC,aAGvBC,YAAcjB,KAAKkB,0BAA0BT,aAEnDQ,MAAME,UAAUC,GACZC,sBAAYC,MACZC,IAEIA,EAAEpB,iBACFc,MAAMO,eACDvB,SAASwB,SAAS,gBAAiB,CAAC7B,yBAM5CK,SAASwB,SAAS,gBAAiB,CAAC7B"}